== KUDOSO

Kudoso's mission is to help parents manage the INFLUENCE of technology on their children through the MUTUAL COOPORATION and POSITIVE REINFORCEMENT
of family values and life skills.  The Kusoso service does this through a cloud-based service that monitors and controls
screen time on virtually every electronic device in the household.  When possible, we provide the abilty to filter content
to ensure that it is appropriate for children ages 2-12.  We instill family values and life skills by restricting access
to devices until required work is completed.  Additionaly, kids are encouraged to do optional but beneficial tasks to earn
more "kudos".  Kudos represent a virtual currency within Kudoso that kids can use to unlock additional screen time, or in
the future to access partner content or even purchase real merchandise.  Ultimately we see Kudoso as the tool parents will
use to curate thier complete digital experience for their families.

Development requirements: the user experience MUST BE QUICK and EASY.  While the underlying system must support complex
logic, the presentation and use of the information must be quick and easy for a typical user.  We want users to get up
and running with Kudoso in under 10 minutes, and all their interactions should be positive ones.  We don't want to
strip functionality, but we MUST present it in a way that is easy to use while being powerful.

=== Theory of Operation

    There are 2 classes of "users" in Kudoso:
        * User
        * Member (as in Family Member)

    USERS are the secure accounts that are associated with a kudoso recurring payment plan.  Other than utilizing a secure
    password and having unqiue email addressees user accounts are not used for anything else in Kudoso.

    Families are the "organizational unit" in Kudoso.

    Family -> Name (Display friendly name for the family)
           -> Devices (All devices associated with the family)
           -> Family Activities (approved family activities and their costs/rewards)
           -> Todos
                -> Todo Schedules (assign todos to members on a specific schedule)
           -> Members
                -> Username (for kid-friendly login)
                -> Passowrd (for kid-friendly login)
                -> Contact
                   -> First/Last Name/Email/etc
                -> My_todos (the record of completed/incomplete todos)
                -> Screen_times (restrictions for screen time: global, per activity, per device)
                -> Screen_time_schedules (calendar / TOD restrictions for when screen time can be used)

    To support kid-friendly logins, the member passwords are not required to be complex and member usernames are only
    uniwue within a family.  As such, a parent (user) must FIRST authenticate on the household devices BEFORE a child
    (member) account can authenticate.  The user authentication places a secure cookie in on the device which is used
    in conjunction with the member's credentials to provide a little more security without making the process overly
    complex for younger users.

    == Understanding Screen Time
        When a child (a family "member") wants to perform an activity, the system must check if its allowed.
        When is screen time allowed? (See member.can_do_activity?)  The system first checks to see if the activity
        is restricted and if it is, ensures that all required todos are complete.  Once the activity/todo restriction
        is satisfied, the member's available screen time is queried.  This looks explicitly at the "global" screen time
        settings for the member, and then the specific screen time restrictions for the device (if applicable) and the
        activity (ex: a parent can say: "My child can have 3 hours of screen time per day, with no more that 2 hours on
        the iPad and no more than 1 hour watching Netflix.").  Lastly, the screen_time_schedule restrictions are evaluated
        to see if screen time is explictly restricted at this time (ex: a parent can say "Do not allow screeen time during
        school hours (9am-3pm) Monday through Friday").

==== KudosoCRM

    The CRM is designed to handle the daily support and sales inquries for Kudoso and to generally ensure that our daily
    operations are handled without issues.  This all done through Tickets.  When a new email comes into info@kudoso.com or
    to support@kudoso.com the MailMan gem downloads this, and creates a new ticket.  Likewise, a customer can create thier
    own support ticket within the application.

    Tickets -> Assigned_to(User)
            -> user_id or contact_id
            -> Status (New, Assigned, Waiting on Customer, Closed)
            -> Ticket_type (Support, Sales, Media, Finance, Partner/BizDev, Other)
            -> Date openned / closed
            -> UUID
            -> Notes
                -> Note Type (Email, Phone, Metting, Letter, Other)
                -> Title
                -> Body
                -> note_attachments
                    -> Name
                    -> File


==== KudosoGateway

    The Kudoso Gateway is an OpenWRT based gateway / router that performs several key functions:
        * Tracks and registers devices in the household
        * Tracks and restricts internet usage based on device / user restrictions like activity, available screen time,
          etc (including a default policy for guests / unknown devices)
        * Filters web content (proxy) for supported devices
        * Records activity results (internet access including application layer whenever possible) with Kudoso Cloud Servers
        * Communicates and controls Kudoso Lockable SmartPlugs in the home

    The Kudoso Gateway operates at 2 layers of the OSI stack:
        * At the network layer, the gateway performs NAT on all traffic and restricts (blocks) IP communication over the
          Internet when needed.
        * At the application layer, for known applications, the gateway will filter/inspect content

    The Kudoso Gateway communicates with Kudoso Cloud Services via its ruby processes.  The Cloud Services provide
    authenication and authorization for specific network requests based on the requesting device/user.  Additionally
    the Cloud Services can provide more robust application layer services like inspecting web pages for questionable content
    and/or keywords.

    The Gateway / Proxy workflow can be seen here: https://www.lucidchart.com/documents/edit/e1ab8429-ac64-44b1-ac71-933c014fc28b?


==== Kudoso API

    To use the API, you must first POST to the sessions controller and create a new API session.  You can authenticate
    either as a family member using three params (family_id, username, password) or as a user using two params (email, password)

    http://api.kudoso.com/v1/sessions POST
        * Create a new API sessions and generate/return the TOKEN for subsequent API calls
        * Params:
            * device_token, string, required
                * A valid device token is used to identify known end points (software builds or partners)
            * provider, string, optional (default: 'identity')
                * Used to define the authentication provider, identity is the local user/pass, 'facebook', etc
            * username, string, optional
                * Username is used in conjunction with family_id to identify a member
            * family_id, integer, optional
                * This is the family_id in the Kudoso system, used in conjunction with 'username'
            * email, string, optional
                * This is the unique email address used to identify a user
            * password, string, optional
                * This is the password of requested user or member
        * Example URL: api.kudoso.com:3000/v1/sessions?email=kaz@kudoso.com&password=password&device_token=3afac3670cbd3ccc8c652a3393c61945

    http://api.kudoso.com/v1/sessions/<token> DELETE
        * Immediately terminates an API session
        * Parmas: None
        * Example URL: api.kudoso.com:3000/v1/sessions/532a782accf30e50665af3a3e5c5a9e3


    http://api.kudoso.com/v1/families/<id> GET
        * Retreives the basic family information (not very useful)
        * Params: None
        * Header: Authorization: Token token="<token>"
        * Example URL: api.kudoso.com:3000/v1/families

    http://api.kudoso.com/v1/families/<id>/devices
        * Retreives the list of devices associated with the family
        * Params: None
        * Header: Authorization: Token token="<token>"
        * Example URL: api.kudoso.com:3000/v1/families/1

    http://api.kudoso.com/v1/families/<id>/activities
        * Retreives the list of activities associated with the family

    http://api.kudoso.com/v1/families/<id>/todos
        * Retreives the list of todos associated with the family

    http://api.kudoso.com/v1/families/<id>/members
        * Retreives the list of members associated with the family


==== AWS / Rubber Setup
    Staging:
        RUBBER_ENV=staging ALIAS=stg-e1a-01 ROLES=app,nginx,unicorn,web,web_tools,db:primary=true cap rubber:create
        RUBBER_ENV=staging cap rubber:bootstrap
        RUBBER_ENV=staging cap deploy

    Production:
        RUBBER_ENV=production ALIAS=app-e1a-01 ROLES=app,nginx,unicorn,web,web_tools,db:primary=true cap rubber:create
        RUBBER_ENV=production cap rubber:bootstrap
        RUBBER_ENV=production cap deploy
