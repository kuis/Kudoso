require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe MyTasksController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # MyTask. As you add validations to MyTask, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
        member_id: @member.id,
        due_date: Time.now.localtime.to_date,
        due_time: Time.now.localtime + 1.hour,
        complete: false,
        verify: false
    }
  }

  let(:invalid_attributes) {
    {
        due_date: Date.tomorrow,
        due_time: 1.hour.ago
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ActivitiesController. Be sure to keep this updated too.
  let(:valid_session) { {} }


  context 'as a parent' do
    before(:each) do
      @member = FactoryGirl.create(:member, parent: true)
      @family = @member.family
      sign_in_member(@member)
    end

    describe "GET index" do
      it "assigns all my_tasks as @my_tasks" do
        my_task = FactoryGirl.create(:my_task, member_id: @member.id)
        get :index, {family_id: @family.id, member_id: @member.id}, valid_session
        expect(assigns(:my_tasks)).to match_array([my_task])
      end
    end

    describe "GET show" do
      it "assigns the requested my_task as @my_task" do
        my_task = FactoryGirl.create(:my_task, member_id: @member.id)
        get :show, {family_id: @family.id, member_id: @member.id, :id => my_task.to_param}, valid_session
        expect(assigns(:my_task)).to eq(my_task)
      end
    end

    describe "GET new" do
      it "assigns a new my_task as @my_task" do
        task_schedule = FactoryGirl.create(:task_schedule, member_id: @member.id)
        expect(task_schedule.valid?).to be_truthy
        get :new, {family_id: @family.id, member_id: @member.id, task_schedule_id: task_schedule.id}, valid_session
        expect(assigns(:my_task)).to be_a_new(MyTask)
      end
    end

    describe "GET edit" do
      it "assigns the requested my_task as @my_task" do
        my_task = FactoryGirl.create(:my_task, member_id: @member.id)
        get :edit, {family_id: @family.id, member_id: @member.id, :id => my_task.to_param}, valid_session
        expect(assigns(:my_task)).to eq(my_task)
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested my_task" do
        my_task = FactoryGirl.create(:my_task, member_id: @member.id)
        expect {
          delete :destroy, {family_id: @family.id, member_id: @member.id, :id => my_task.to_param}, valid_session
        }.to change(MyTask, :count).by(-1)
      end

      it "redirects to the current member dashboard" do
        my_task = FactoryGirl.create(:my_task, member_id: @member.id)
        delete :destroy, {family_id: @family.id, member_id: @member.id, :id => my_task.to_param}, valid_session
        expect(flash[:error]).to be_falsey
        expect(response).to redirect_to(family_member_path(@family, @member))
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new MyTask" do
          expect {
            post :create, {family_id: @family.id, member_id: @member.id, :my_task => valid_attributes, task_schedule_id: FactoryGirl.create(:task_schedule, member_id: @member.id).id}, valid_session
          }.to change(MyTask, :count).by(1)
        end

        it "assigns a newly created my_task as @my_task" do
          post :create, {family_id: @family.id, member_id: @member.id, :my_task => valid_attributes, task_schedule_id: FactoryGirl.create(:task_schedule, member_id: @member.id).id}, valid_session
          expect(assigns(:my_task)).to be_a(MyTask)
          expect(assigns(:my_task)).to be_persisted
        end

        it "redirects to the created my_task" do
          post :create, {family_id: @family.id, member_id: @member.id, :my_task => valid_attributes, task_schedule_id: FactoryGirl.create(:task_schedule, member_id: @member.id).id}, valid_session
          expect(response).to redirect_to([@family, @member])
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved my_task as @my_task when missing task_schedule" do
          post :create, {family_id: @family.id, member_id: @member.id, :my_task => valid_attributes, task_schedule_id: 'ertoeirtori'}, valid_session
          expect(assigns(:my_task)).to be_a_new(MyTask)
        end

        it "assigns a newly created but unsaved my_task as @my_task when missing task_schedule" do
          post :create, {family_id: @family.id, member_id: @member.id, :my_task => invalid_attributes, task_schedule_id: FactoryGirl.create(:task_schedule, member_id: @member.id).id}, valid_session
          expect(assigns(:my_task)).to be_a_new(MyTask)
        end

        it "re-renders the 'new' template" do
          post :create, {family_id: @family.id, member_id: @member.id, :my_task => invalid_attributes, task_schedule_id: FactoryGirl.create(:task_schedule, member_id: @member.id).id}, valid_session
          expect(response).to render_template("new")
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        let(:new_attributes) {
          {
              complete: true,
              verify: true,
              verified_at: 1.minute.ago
          }
        }

        it "updates the requested my_task" do
          my_task = FactoryGirl.create(:my_task, member_id: @member.id)
          put :update, {family_id: @family.id, member_id: @member.id, :id => my_task.to_param, :my_task => new_attributes}, valid_session
          my_task.reload
          expect(my_task.complete).to be_truthy
          expect(my_task.verify).to be_truthy
          expect(my_task.verified_at).to be_between(Time.now.localtime - 2.minutes, Time.now.localtime)
        end

        it "assigns the requested my_task as @my_task" do
          my_task = FactoryGirl.create(:my_task, member_id: @member.id)
          put :update, {family_id: @family.id, member_id: @member.id, :id => my_task.to_param, :my_task => valid_attributes}, valid_session
          expect(assigns(:my_task)).to eq(my_task)
        end

        it "redirects to the my_task" do
          my_task = FactoryGirl.create(:my_task, member_id: @member.id)
          put :update, {family_id: @family.id, member_id: @member.id, :id => my_task.to_param, :my_task => valid_attributes}, valid_session
          expect(response).to redirect_to([@family, @member])
        end
      end

      describe "with invalid params" do
        it "assigns the my_task as @my_task" do
          my_task = FactoryGirl.create(:my_task, member_id: @member.id)
          put :update, {family_id: @family.id, member_id: @member.id, :id => my_task.to_param, :my_task => invalid_attributes}, valid_session
          expect(assigns(:my_task)).to eq(my_task)
        end

        it "re-renders the 'edit' template" do
          my_task = FactoryGirl.create(:my_task, member_id: @member.id)
          put :update, {family_id: @family.id, member_id: @member.id, :id => my_task.to_param, :my_task => invalid_attributes}, valid_session
          expect(response).to render_template("edit")
        end
      end
    end



  end
  context 'as a child' do
    before(:each) do
      @member = FactoryGirl.create(:member, parent: false)
      @family = @member.family
      sign_in_member(@member)
    end

    describe "DELETE destroy" do
      it "does not destroys the requested my_task" do
        my_task = FactoryGirl.create(:my_task, member_id: @member.id)
        expect {
          delete :destroy, {family_id: @family.id, member_id: @member.id, :id => my_task.to_param}, valid_session
        }.to change(MyTask, :count).by(0)
      end

      it "redirects to the current member dashboard" do
        my_task = FactoryGirl.create(:my_task, member_id: @member.id)
        delete :destroy, {family_id: @family.id, member_id: @member.id, :id => my_task.to_param}, valid_session
        expect(flash[:error]).to be_truthy
        expect(response).to redirect_to(family_member_path(@family, @member))
      end
    end
  end


end
